#!/bin/bash -eu
# Copyright 2016 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
################################################################################

echo "---------------------------------------------------------------"

# Based on https://github.com/aflgo/oss-fuzz.git
# Since we can't rely on the cloned source code directory
# to be called exactly like the project (e. g.
# $SRC/$PROJECT with PROJECT=project.name), we enter each subdirectory
# of $SRC and try to checkout the commit.
if ! [ -z "$COMMIT" ]; then
	echo "INFO: Rollback to commit $COMMIT of project $PROJECT"
	directories=$(find $SRC -maxdepth 1 -type d)
	checkout_success=0
	for directory in $directories; do
		pushd $directory >/dev/null  
		if [ -d .git ]; then         
			if [ -f $(git rev-parse --git-dir)/shallow ]; then
				echo "INFO: git unshallow $directory of project $PROJECT"
				git pull --unshallow
			fi
			echo "INFO: Try to checkout $COMMIT of project $PROJECT in directory $directory"
			if git checkout $COMMIT; then
				echo "INFO: checked out commit $COMMIT of project $PROJECT"
				checkout_success=1
				popd >/dev/null
				break
			fi
			echo "INFO: checkout $COMMIT of project $PROJECT in directory $directory failed"
			#git checkout $COMMIT
			#if [ $? -eq 0 ]; then
			#	echo "INFO: checkout commit $COMMIT of project $PROJECT"
			#	checkout_success=1
			#	break
			#fi
		fi
		popd >/dev/null
	done
	if [ $checkout_success -eq 0 ]; then
		echo "ERROR: Rollback to commit $COMMIT of project $PROJECT failed."
		exit 1
	fi
fi


if [ "$SANITIZER" = "dataflow" ] && [ "$FUZZING_ENGINE" != "dataflow" ]; then
  echo "ERROR: 'dataflow' sanitizer can be used with 'dataflow' engine only."
  exit 1
fi

if [ "$FUZZING_LANGUAGE" = "jvm" ]; then
  if [ "$FUZZING_ENGINE" != "libfuzzer" ]; then
    echo "ERROR: JVM projects can be fuzzed with libFuzzer engine only."
    exit 1
  fi
  if [ "$SANITIZER" != "address" ] && [ "$SANITIZER" != "coverage" ] && [ "$SANITIZER" != "undefined" ]; then
    echo "ERROR: JVM projects can be fuzzed with AddressSanitizer or UndefinedBehaviorSanitizer only."
    exit 1
  fi
  if [ "$ARCHITECTURE" != "x86_64" ]; then
    echo "ERROR: JVM projects can be fuzzed on x86_64 architecture only."
    exit 1
  fi
fi

if [ "$FUZZING_LANGUAGE" = "python" ]; then
  if [ "$FUZZING_ENGINE" != "libfuzzer" ]; then
    echo "ERROR: Python projects can be fuzzed with libFuzzer engine only."
    exit 1
  fi
  if [ "$SANITIZER" != "address" ] && [ "$SANITIZER" != "undefined" ]; then
    echo "ERROR: Python projects can be fuzzed with AddressSanitizer or UndefinedBehaviorSanitizer only."
    exit 1
  fi
  if [ "$ARCHITECTURE" != "x86_64" ]; then
    echo "ERROR: Python projects can be fuzzed on x86_64 architecture only."
    exit 1
  fi
fi

if [ -z "${SANITIZER_FLAGS-}" ]; then
  FLAGS_VAR="SANITIZER_FLAGS_${SANITIZER}"
  export SANITIZER_FLAGS=${!FLAGS_VAR-}
fi

if [[ $ARCHITECTURE == "i386" ]]; then
    export CFLAGS="-m32 $CFLAGS"
    cp -R /usr/i386/lib/* /usr/local/lib
fi
# JVM projects are fuzzed with Jazzer, which has libFuzzer built in.
if [[ $FUZZING_ENGINE != "none" ]] && [[ $FUZZING_LANGUAGE != "jvm" ]]; then
  # compile script might override environment, use . to call it.
  . compile_${FUZZING_ENGINE}
fi

if [[ $SANITIZER_FLAGS = *sanitize=memory* ]]
then
  # Take all libraries from lib/msan and MSAN_LIBS_PATH
  # export CXXFLAGS_EXTRA="-L/usr/msan/lib $CXXFLAGS_EXTRA"
  cp -R /usr/msan/lib/* /usr/local/lib/

  echo 'Building without MSan instrumented libraries.'
fi

# Coverage flag overrides.
COVERAGE_FLAGS_VAR="COVERAGE_FLAGS_${SANITIZER}"
if [[ -n ${!COVERAGE_FLAGS_VAR+x} ]]
then
  export COVERAGE_FLAGS="${!COVERAGE_FLAGS_VAR}"
fi

 # Don't need coverage instrumentation for engine-less, afl++ builds.
if [ $FUZZING_ENGINE = "none" ] || [ $FUZZING_ENGINE = "afl" ]; then
  export COVERAGE_FLAGS=
fi

# Rust does not support sanitizers and coverage flags via CFLAGS/CXXFLAGS, so
# use RUSTFLAGS.
# FIXME: Support code coverage once support is in.
# See https://github.com/rust-lang/rust/issues/34701.
if [ "$SANITIZER" != "undefined" ] && [ "$SANITIZER" != "coverage" ] && [ "$ARCHITECTURE" != 'i386' ]; then
  export RUSTFLAGS="--cfg fuzzing -Zsanitizer=${SANITIZER} -Cdebuginfo=1 -Cforce-frame-pointers"
else
  export RUSTFLAGS="--cfg fuzzing -Cdebuginfo=1 -Cforce-frame-pointers"
fi
if [ "$SANITIZER" = "coverage" ]
then
    # link to C++ from comment in f5098035eb1a14aa966c8651d88ea3d64323823d
    export RUSTFLAGS="$RUSTFLAGS -Zinstrument-coverage -C link-arg=-lc++"
fi

# Add Rust libfuzzer flags.
# See https://github.com/rust-fuzz/libfuzzer/blob/master/build.rs#L12.
export CUSTOM_LIBFUZZER_PATH="$LIB_FUZZING_ENGINE_DEPRECATED"
export CUSTOM_LIBFUZZER_STD_CXX=c++

export CFLAGS="$CFLAGS $SANITIZER_FLAGS $COVERAGE_FLAGS"
export CXXFLAGS="$CFLAGS $CXXFLAGS_EXTRA"

if [ "$FUZZING_LANGUAGE" = "python" ]; then
  sanitizer_with_fuzzer_lib_dir=`python3 -c "import atheris; import os; print(atheris.path())"`
  sanitizer_with_fuzzer_output_lib=$OUT/sanitizer_with_fuzzer.so
  if [ "$SANITIZER" = "address" ]; then
    cp $sanitizer_with_fuzzer_lib_dir/asan_with_fuzzer.so $sanitizer_with_fuzzer_output_lib
  elif [ "$SANITIZER" = "undefined" ]; then
    cp $sanitizer_with_fuzzer_lib_dir/ubsan_with_fuzzer.so $sanitizer_with_fuzzer_output_lib
  fi

  # Disable leak checking as it is unsupported.
  export CFLAGS="$CFLAGS -fno-sanitize=function,leak,vptr,"
  export CXXFLAGS="$CXXFLAGS -fno-sanitize=function,leak,vptr"
fi

# Copy latest llvm-symbolizer in $OUT for stack symbolization.
#cp $(which llvm-symbolizer) $OUT/

# Copy Jazzer to $OUT if needed.
if [ "$FUZZING_LANGUAGE" = "jvm" ]; then
  cp $(which jazzer_agent_deploy.jar) $(which jazzer_driver) $OUT/
  jazzer_driver_with_sanitizer=$OUT/jazzer_driver_with_sanitizer
  if [ "$SANITIZER" = "address" ]; then
    cp $(which jazzer_driver_asan) $jazzer_driver_with_sanitizer
  elif [ "$SANITIZER" = "undefined" ]; then
    cp $(which jazzer_driver_ubsan) $jazzer_driver_with_sanitizer
  elif [ "$SANITIZER" = "coverage" ]; then
    # Coverage builds require no instrumentation.
    cp $(which jazzer_driver) $jazzer_driver_with_sanitizer
  fi

  # Disable leak checking since the JVM triggers too many false positives.
  export CFLAGS="$CFLAGS -fno-sanitize=leak"
  export CXXFLAGS="$CXXFLAGS -fno-sanitize=leak"
fi

if [ "$SANITIZER" = "introspector" ]; then
  export LDFLAGS="-fuse-ld=gold"
  export AR=llvm-ar
  export RANLIB=llvm-ranlib

  # Move ar and ranlib
  mv /usr/bin/ar /usr/bin/old-ar
  mv /usr/bin/ranlib /usr/bin/old-ranlib

  ln -sf /usr/local/bin/llvm-ar /usr/bin/ar
  ln -sf /usr/local/bin/llvm-ranlib /usr/bin/ranlib
fi

echo "---------------------------------------------------------------"
echo "CC=$CC"
echo "CXX=$CXX"
echo "CFLAGS=$CFLAGS"
echo "CXXFLAGS=$CXXFLAGS"
echo "RUSTFLAGS=$RUSTFLAGS"
echo "---------------------------------------------------------------"

BUILD_CMD="bash -eux $SRC/build.sh"

# Set +u temporarily to continue even if GOPATH and OSSFUZZ_RUSTPATH are undefined.
set +u
# We need to preserve source code files for generating a code coverage report.
# We need exact files that were compiled, so copy both $SRC and $WORK dirs.
COPY_SOURCES_CMD="cp -rL --parents $SRC $WORK /usr/include /usr/local/include $GOPATH $OSSFUZZ_RUSTPATH /rustc $OUT"
set -u

if [ "$FUZZING_LANGUAGE" = "rust" ]; then
  # Copy rust std lib to its path with a hash.
  export rustch=`rustc --version --verbose | grep commit-hash | cut -d' ' -f2`
  mkdir -p /rustc/$rustch/
  cp -r /rust/rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/ /rustc/$rustch/
fi

CFLAGS_SAVED=$CFLAGS
CXXFLAGS_SAVED=$CXXFLAGS
LIB_FUZZING_ENGINE_SAVED=$LIB_FUZZING_ENGINE

if ! [ -z "$NOINST" ]; then
	# Remove every -fsanitize flag except for those, that contain the word fuzzer.
	# Compiling with these flags would yield a program which only contains the coverage
	# instrumentation, but no other instrumentation (like asan, etc.).
	# The coverage instrumentation for -fsanitize=fuzzer and fuzzer-no-link consists of:
	#	CoverageFeatures |= 
	#		CoverageInline8bitCounters |
	#		CoverageIndirCall |
	#		CoverageTraceCmp |
	#		CoveragePCTable |
	#		CoverageStackDepth
	# (see l. 450 in llvm-project/clang/lib/Driver/SanitizerArgs.cpp)
	# These instrumentations can be disabled by the following compilation flags:
	#	-fno-sanitize-coverage=inline-8bit-counters
	#	-fno-sanitize-coverage=indirect-calls
	#	-fno-sanitize-coverage=trace-cmp
	#	-fno-sanitize-coverage=pc-table
	#	-fno-sanitize-coverage=stack-depth

	export CFLAGS=$(echo $CFLAGS_SAVED | sed 's/ /\n/g' | sed '/^-fsanitize[^ =]*=fuzzer[^ ]*$/!s/-fsanitize[^ ]*$//' | sed '/^$/d' | tr '\n' ' ' | sed 's/ $//')
	export CXXFLAGS=$(echo $CXXFLAGS_SAVED | sed 's/ /\n/g' | sed '/^-fsanitize[^ =]*=fuzzer[^ ]*$/!s/-fsanitize[^ ]*$//' | sed '/^$/d' | tr '\n' ' ' | sed 's/ $//')
	export LIB_FUZZING_ENGINE=$(echo $LIB_FUZZING_ENGINE_SAVED | sed 's/ /\n/g' | sed '/^-fsanitize[^ =]*=fuzzer[^ ]*$/!s/-fsanitize[^ ]*$//' | sed '/^$/d' | tr '\n' ' ' | sed 's/ $//')

	export CFLAGS="$CFLAGS -fno-sanitize-coverage=indirect-calls -fno-sanitize-coverage=inline-8bit-counters -fno-sanitize-coverage=pc-table -fno-sanitize-coverage=stack-depth"
	export CXXFLAGS="$CXXFLAGS -fno-sanitize-coverage=indirect-calls -fno-sanitize-coverage=inline-8bit-counters -fno-sanitize-coverage=pc-table -fno-sanitize-coverage=stack-depth"

	export AFL_NOOPT=1


	echo "INFO: Build without instrumentation. New CFLAGS/CXXFLAGS:"
	echo "---------------------------------------------------------------"
	echo "CFLAGS=$CFLAGS"
	echo "CXXFLAGS=$CXXFLAGS"
	echo "---------------------------------------------------------------"
fi

if ! [ -z "$GRAPHPLUGIN" ]; then
	export CFLAGS="-fplugin=/usr/local/lib/libgraph_extraction_plugin.so $CFLAGS"
	export CXXFLAGS="-fplugin=/usr/local/lib/libgraph_extraction_plugin.so $CXXFLAGS"

	echo "INFO: Build without GraphExtractionPlugin. New CFLAGS/CXXFLAGS:"
	echo "---------------------------------------------------------------"
	echo "CFLAGS=$CFLAGS"
	echo "CXXFLAGS=$CXXFLAGS"
	echo "---------------------------------------------------------------"
fi

if ! [ -z "$SAVETEMPS" ]; then
	export CFLAGS="-save-temps=obj $CFLAGS"
	export CXXFLAGS="-save-temps=obj $CXXFLAGS"

	echo "INFO: Save temporary compilation files. New CFLAGS/CXXFLAGS:"
	echo "---------------------------------------------------------------"
	echo "CFLAGS=$CFLAGS"
	echo "CXXFLAGS=$CXXFLAGS"
	echo "---------------------------------------------------------------"
fi

# Remove ever compile option that starts with "-g" and has probably controls
# the creation of debug information in some way or another. We want to have
# full control ourselves!
export CFLAGS=$(echo $CFLAGS | sed "s/-g[^ ]*//g" | tr -s ' ')
export CXXFLAGS=$(echo $CXXFLAGS | sed "s/-g[^ ]*//g" | tr -s ' ')
echo "INFO: Removed every -gxxxx flag."
echo "---------------------------------------------------------------"
echo "CFLAGS=$CFLAGS"
echo "CXXFLAGS=$CXXFLAGS"
echo "---------------------------------------------------------------"

# Add dwarf version and other debug flags (-gxxxx flags) to CFLAGS/CXXFLAGS
# explicitly. Note, this may not result in a target binary that actually
# contains the selected dwarf version (at least that's the case for the
# instrumented target, the target without instrumentation seems to contain the
# selected dwarf version).
export CFLAGS="-gfull -g3 -gdwarf-$DWARF $CFLAGS"
export CXXFLAGS="-gfull -g3 -gdwarf-$DWARF $CXXFLAGS"
echo "INFO: Use DWARF$DWARF debug information. New CFLAGS/CXXFLAGS:"
echo "---------------------------------------------------------------"
echo "CFLAGS=$CFLAGS"
echo "CXXFLAGS=$CXXFLAGS"
echo "---------------------------------------------------------------"

if [ "${BUILD_UID-0}" -ne "0" ]; then
  adduser -u $BUILD_UID --disabled-password --gecos '' builder
  chown -R builder $SRC $OUT $WORK
  su -c "$BUILD_CMD" builder
  if [ "$SANITIZER" = "coverage" ]; then
    # Some directories have broken symlinks (e.g. honggfuzz), ignore the errors.
    su -c "$COPY_SOURCES_CMD" builder 2>/dev/null || true
  fi
else
  $BUILD_CMD
  if [ "$SANITIZER" = "coverage" ]; then
    # Some directories have broken symlinks (e.g. honggfuzz), ignore the errors.
    $COPY_SOURCES_CMD 2>/dev/null || true
  fi
fi

if [ "$SANITIZER" = "introspector" ]; then
  unset CXXFLAGS
  unset CFLAGS
  apt-get install -y libjpeg-dev zlib1g-dev
  pip3 install --upgrade setuptools
  pip3 install cxxfilt pyyaml beautifulsoup4 lxml soupsieve matplotlib
  mkdir -p $SRC/inspector

  find $SRC/ -name "*.data" -exec cp {} $SRC/inspector/ \;
  find $SRC/ -name "*.data.yaml" -exec cp {} $SRC/inspector/ \;
  # Move coverage report.
  if [ -d "$OUT/textcov_reports" ]
  then
    cp $OUT/textcov_reports/*.covreport $SRC/inspector/
  fi  
  
  cd $SRC/inspector

  # Correlate fuzzer binaries to fuzz-introspector's raw data
  python3 /fuzz-introspector/post-processing/main.py correlate --binaries_dir=$OUT/

  # Generate fuzz-introspector HTML report, this generates
  # the file exe_to_fuzz_introspector_logs.yaml
  REPORT_ARGS="--target_dir=$SRC/inspector"
  # Only pass coverage_url when COVERAGE_URL is set (in cloud builds)
  if [[ ! -z "${COVERAGE_URL+x}" ]]; then
    REPORT_ARGS="$REPORT_ARGS --coverage_url=${COVERAGE_URL}"
  fi
  # Use the just-generated correlation file
  REPORT_ARGS="$REPORT_ARGS --correlation_file=exe_to_fuzz_introspector_logs.yaml"
  python3 /fuzz-introspector/post-processing/main.py report $REPORT_ARGS

  cp -rf $SRC/inspector $OUT/inspector
fi

if ! [ -z "$NOINST" ]; then
	export CFLAGS=$CFLAGS_SAVED
	export CXXFLAGS=$CXXFLAGS_SAVED
	export LIB_FUZZING_ENGINE=$LIB_FUZZING_ENGINE_SAVED
	unset AFL_NOOPT
fi

if [[ "$FUZZING_ENGINE" = "dataflow" ]]; then
  # Remove seed corpus as it can be huge but is not needed for a dataflow build.
  rm -f $OUT/*.zip
fi

# Move every AST file which may have possibly been created (if the GraphExtractionPlugin
# was used during compilation) to the OUT dir
for fpath in $(find $SRC -type f | grep -P "AST[^/]*json$"); do
	# We may have multiple files with the same name, so we're using
	# a hash of the path to avoid duplicates in $OUT
	path_checksum=$(echo $fpath | md5sum | tr -s ' ' | cut -d' ' -f1)
	fname=$(basename $fpath)
	mv ${fpath} ${OUT}/${path_checksum}_${fname}
	echo "INFO: Copied AST $fname to OUT directory."
done

if ! [ -z "$SAVETEMPS" ]; then
	regex="\.i$\|\.ii$"

	# Check if the temporary compilation files are placed in $SRC or $WORK
	srcdir_ii_count=$(find $SRC -type f | grep -i "$regex" | wc -l)
	workdir_ii_count=$(find $WORK -type f | grep -i "$regex" | wc -l)
	if [ "$srcdir_ii_count" -gt "$workdir_ii_count" ]; then
		tempdir=$SRC
	else
		tempdir=$WORK
	fi

	# Save every preprocessed C/C++ source file
	regex="\.i$\|\.ii$"
	tar -czvf preprocessed.tar.gz $(find $tempdir -type f | grep -i "$regex")
	mv preprocessed.tar.gz ${OUT}/

	# Save every LLVM bitcode file
	regex="\.bc$"
	tar -czvf llvmbc.tar.gz $(find $tempdir -type f | grep -i "$regex")
	mv llvmbc.tar.gz ${OUT}/
fi

# Save every C/C++ source file
if ! [ -z "$SAVESOURCE" ]; then
	regex="\.c$\|\.cc$\|\.cpp$\|\.cxx$\|\.h$\|\.hpp$\|\.hxx$"
	tar -czvf source.tar.gz $(find $SRC -type f | grep -i "$regex")
	mv source.tar.gz ${OUT}/
fi

# Since the docker service runs as root we better make sure the user on the
# host can r/w/x the files we create here.
chmod -R 777 $OUT
chmod -R 777 $WORK

# So that tracebacks will not be symbolized:
mv /usr/local/bin/llvm-symbolizer /usr/local/bin/llvm-symbolizer.bak
