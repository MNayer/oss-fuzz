#!/usr/bin/python3

import json


def fread_json(fpath):
    with open(fpath, "r") as f:
        return json.loads(f.read())


def end_fuzzing():
    print("[targetcheck] End fuzzing.")
    sys.exit(1)


def continue_fuzzing():
    print("[targetcheck] Continue fuzzing.")
    sys.exit(0)


def frame_match_line_granularity(frame_a, frame_b):
    return (
        frame_a["function"]["fpath"] == frame_b["function"]["fpath"]
        and frame_a["function"]["linenum"] == frame_b["function"]["linenum"]
    )


def frame_match_function_granularity(frame_a, frame_b):
    return (
        frame_a["function"]["fpath"] == frame_b["function"]["fpath"]
        and frame_a["function"]["name"] == frame_b["function"]["name"]
    )


def first_frame_match(target_traceback, crash_traceback):
    target_frame = target_traceback[0]
    crash_frame = crash_traceback[0]

    if frame_match_line_granularity(target_frame, crash_frame):
        return True

    return False


def traceback_match(target_traceback, crash_traceback):
    if len(target_traceback) != len(crash_traceback):
        return False

    for target_frame, crash_frame in zip(target_traceback, crash_traceback):
        if not frame_match_line_granularity(target_frame, crash_frame):
            return False

    return True


def main(executable, testcase):
    target_log = fread_json("/out/testcase.json")
    crash_log = fread_json(f"{testcase}.json")

    if len(target_log["tracebacks"]) == 0:
        continue_fuzzing()
    if len(crash_log["tracebacks"]) == 0:
        continue_fuzzing()

    target_traceback = target_log["tracebacks"][0]
    crash_traceback = crash_log["tracebacks"][0]

    if len(target_traceback) == 0:
        continue_fuzzing()
    if len(crash_traceback) == 0:
        continue_fuzzing()

    # if first_frame_match(target_traceback, crash_traceback):
    #    end_fuzzing()

    if traceback_match(target_traceback, crash_traceback):
        end_fuzzing()

    continue_fuzzing()


if __name__ == "__main__":
    import sys

    if len(sys.argv) != 3:
        print(f"Usage: {sys.argv[0]} <executable> <testcase>")
        sys.exit(1)

    main(sys.argv[1], sys.argv[2])
